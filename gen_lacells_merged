#! /bin/bash
#
#   Quick and dirty script to build and install a new
#   cell tower database on phone for microg/nogapps
#   network location.
#

#
# Configure the cell database creator in gen_lacells_conf first
# An example file can be found in gen_lacells_conf.sample
#
if [[ ! -f gen_lacells_conf ]]; then
  echo
  echo 'You have to create your config file first.'
  echo 'An example config can be found as gen_lacells_conf.sample'
  echo 'Copy that to gen_lacells_conf and edit it with your data.'
  echo
  exit
fi

. ./gen_lacells_conf

#
# Shall we restrict the resulting database to configured MCCs?
#
if [[ -z "${MCC}" ]]; then
  PURGE=""
else
  PURGE="DELETE FROM cells WHERE mcc NOT IN (${MCC});"
fi

#
#   Get latest cell tower data from Mozilla Location Services
#
echo 'Getting cell tower data from Mozilla Location Services'
if [ -e towers_mozilla.csv.gz ] ; then
    rm towers_mozilla.csv.gz
fi
if [ -e towers_mozilla.csv ] ; then
    mv -f towers_mozilla.csv towers_opencellid.csv.bak
fi
NOW=`date -u "+%Y-%m-%d"`
echo "${FNAME}"
wget --no-check-certificate --output-document=towers_mozilla.csv.gz "https://d17pt8qph6ncyq.cloudfront.net/export/MLS-full-cell-export-${NOW}T000000.csv.gz"
gunzip towers_mozilla.csv.gz

#
#   Get latest cell tower data from opencellid
#
echo 'Getting cell tower data from Open Cell ID'
if [ -e towers_opencellid.csv.gz ] ; then
    rm towers_opencellid.csv.gz
fi
if [ -e towers_opencellid.csv ] ; then
    mv -f towers_opencellid.csv towers_opencellid.csv.bak
fi
wget --output-document=towers_opencellid.csv.gz "http://opencellid.org/downloads/?apiKey=${API_KEY}&filename=cell_towers.csv.gz"
gunzip towers_opencellid.csv.gz

#
#   Backup previous database and build new one.
#
#   Since Mozilla and OpenCellId have agreed to a common CSV format
#   we can use the same import logic for both. Buried in the SQL is
#   basically the following logic:
#   1. Import towers known to OpenCellId with weighted values
#   2. Import towers known to Mozilla with weighted values (will result in tower duplication)
#   3. Merge towers with weighted average values
#   4. Using MCC value(s), delete towers as per user config
#
#   DATA CLEANUP
#
#   The database for the whole world is fairly large, so the user can
#   define to purge unwanted areas (see gen_lacells_config)
#
#   The opencellid database contains lots of towers with no coverage
#   range information (aproxy for accuracy). And due to sampling issues,
#   it is possible that low coverage range estimates are incorrect.
#
#   In addition, there are towers which have a coverage range reported
#   to be 1000s of KM which is probably incorrect and do not help on
#   locating the phone. So the expression:
#
#       min(max(range, 500),100000)
#
#   Is used to force each tower coverage range into the bounds of 0.5KM
#   to 100KM coverage range. These can be adjusted as needed but the
#   lower bound should be above zero to avoid divide by zero errors.
#
#
# ===============================================
# As of 6Sep2014, CSV file has following header:
# radio,mcc,net,area,cell,unit,lon,lat,range,samples,changeable,created,updated,averageSignal
# GSM,262,2,148,28260,,7.27268,50.68719,0,0,0,1207455686,1357937166,
#
# ===============================================
#
echo 'Building combined CSV file'
if [ -e lacells.db ] ; then
    mv -f lacells.db lacells.db.bak
fi

#
# Create a merged CSV file with the columns we care about sorted by
# MCC, MNM, LAC, and CID. Could do this in PHP or other language but
# CSV import and output in sqlite3 make this pretty easy.
#
sqlite3 lacells.db <<!
PRAGMA synchronous = OFF;
PRAGMA journal_mode = OFF;
CREATE TABLE cells(mcc INTEGER, mnc INTEGER, lac INTEGER, cid INTEGER, longitude REAL, latitude REAL, altitude REAL, accuracy REAL, samples INTEGER);
CREATE TEMP TABLE cells_weighted AS SELECT * FROM cells;
CREATE TEMP TABLE cells_new(radio TEXT, mcc INTEGER, mnc INTEGER, lac INTEGER, cellId INTEGER, unit TEXT, long REAL, lat REAL, range INTEGER, samples INTEGER, changeable BOOL, created INTEGER, updated INTEGER, averageSignalStrength INTEGER);
.mode csv
.import towers_opencellid.csv cells_new
INSERT INTO cells_weighted SELECT mcc, mnc, lac, cellId, long*max(1,samples), lat*max(1,samples), -1*max(1,samples), min(max(range, 500),100000)*max(1,samples), max(1,samples) FROM cells_new;
DROP TABLE cells_new;
CREATE TEMP TABLE cells_new(radio TEXT, mcc INTEGER, mnc INTEGER, lac INTEGER, cellId INTEGER, unit TEXT, long REAL, lat REAL, range INTEGER, samples INTEGER, changeable BOOL, created INTEGER, updated INTEGER, averageSignalStrength INTEGER);
.mode csv
.import towers_mozilla.csv cells_new
INSERT INTO cells_weighted SELECT mcc, mnc, lac, cellId, long*max(1,samples), lat*max(1,samples), -1*max(1,samples), min(max(range, 500),100000)*max(1,samples), max(1,samples) FROM cells_new;
DROP TABLE cells_new;
INSERT INTO cells SELECT mcc, mnc, lac, cid, SUM(longitude)/SUM(samples), SUM(latitude)/SUM(samples), SUM(altitude)/SUM(samples), SUM(accuracy)/SUM(samples), SUM(samples) FROM cells_weighted GROUP BY mcc, mnc, lac, cid;
DROP TABLE cells_weighted;
${PURGE}
CREATE INDEX _idx1 ON cells (mcc, mnc, lac, cid);
CREATE INDEX _idx2 ON cells (lac, cid);
VACUUM;
.quit
!

#
#   Push the new database to the phone. Reboot may not
#   be required but probably won't hurt.
#
case $AUTO_PUSH in
  0) ready='n';;
  1) ready='y';;
  *)
    read -n 1 -p "Ready to push the database to your device? (y/n)" ready
    echo
    ready=$(echo $ready | tr [:upper:] [:lower:])
    ;;
esac

if [[ "${ready}" != "y" ]]; then
  echo "Not pushing the database. You can do so manually, executing"
  echo "   adb push lacells.db /sdcard/.nogapps/lacells.db"
  echo
  exit
else
  echo 'Pushing database to phone'
  adb push lacells.db /sdcard/.nogapps/lacells.db
  #adb reboot
fi
